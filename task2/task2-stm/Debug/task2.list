
task2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f4  080003fc  000103fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f4  080003f4  000103fc  2**0
                  CONTENTS
  4 .ARM          00000000  080003f4  080003f4  000103fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f4  080003fc  000103fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003fc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003fc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000098b  00000000  00000000  0001042c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023b  00000000  00000000  00010db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000070  00000000  00000000  00010ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00011068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd5f  00000000  00000000  000110b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000b51  00000000  00000000  0001ee0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004faed  00000000  00000000  0001f960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006f44d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b0  00000000  00000000  0006f4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003dc 	.word	0x080003dc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003dc 	.word	0x080003dc

080001d4 <main>:
#include "stm32f401cc_interface.h"

int main(void) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	RCC_AHB1ENR |=(1<<1);
 80001da:	4b4e      	ldr	r3, [pc, #312]	; (8000314 <main+0x140>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001de:	4a4d      	ldr	r2, [pc, #308]	; (8000314 <main+0x140>)
 80001e0:	f043 0302 	orr.w	r3, r3, #2
 80001e4:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOB_MODER |=(0x01<<10);
 80001e6:	4b4c      	ldr	r3, [pc, #304]	; (8000318 <main+0x144>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a4b      	ldr	r2, [pc, #300]	; (8000318 <main+0x144>)
 80001ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001f0:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |=(0x01<<12);
 80001f2:	4b49      	ldr	r3, [pc, #292]	; (8000318 <main+0x144>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a48      	ldr	r2, [pc, #288]	; (8000318 <main+0x144>)
 80001f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001fc:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |=(0x01<<14);
 80001fe:	4b46      	ldr	r3, [pc, #280]	; (8000318 <main+0x144>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a45      	ldr	r2, [pc, #276]	; (8000318 <main+0x144>)
 8000204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000208:	6013      	str	r3, [r2, #0]

	GPIOB_PUPDR|=(0x01<<6);
 800020a:	4b43      	ldr	r3, [pc, #268]	; (8000318 <main+0x144>)
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	4a42      	ldr	r2, [pc, #264]	; (8000318 <main+0x144>)
 8000210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000214:	60d3      	str	r3, [r2, #12]

int j;
int count=0;
 8000216:	2300      	movs	r3, #0
 8000218:	603b      	str	r3, [r7, #0]
while (1) {
     if((GPIOB_IDR & (1<<3))==0x08)
 800021a:	4b3f      	ldr	r3, [pc, #252]	; (8000318 <main+0x144>)
 800021c:	691b      	ldr	r3, [r3, #16]
 800021e:	f003 0308 	and.w	r3, r3, #8
 8000222:	2b08      	cmp	r3, #8
 8000224:	d174      	bne.n	8000310 <main+0x13c>
     {
    	 for(j=0;j<=1500;j++)
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e002      	b.n	8000232 <main+0x5e>
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	3301      	adds	r3, #1
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000238:	4293      	cmp	r3, r2
 800023a:	ddf7      	ble.n	800022c <main+0x58>
    	 {

    	 }
    	 if((GPIOB_IDR &(1<<3))==0x00)
 800023c:	4b36      	ldr	r3, [pc, #216]	; (8000318 <main+0x144>)
 800023e:	691b      	ldr	r3, [r3, #16]
 8000240:	f003 0308 	and.w	r3, r3, #8
 8000244:	2b00      	cmp	r3, #0
 8000246:	d163      	bne.n	8000310 <main+0x13c>
    	 {
    		 count +=1;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	3301      	adds	r3, #1
 800024c:	603b      	str	r3, [r7, #0]
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	3b01      	subs	r3, #1
 8000252:	2b06      	cmp	r3, #6
 8000254:	d850      	bhi.n	80002f8 <main+0x124>
 8000256:	a201      	add	r2, pc, #4	; (adr r2, 800025c <main+0x88>)
 8000258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800025c:	08000279 	.word	0x08000279
 8000260:	08000281 	.word	0x08000281
 8000264:	08000295 	.word	0x08000295
 8000268:	080002a9 	.word	0x080002a9
 800026c:	080002bd 	.word	0x080002bd
 8000270:	080002d1 	.word	0x080002d1
 8000274:	080002e5 	.word	0x080002e5
    		 switch(count)
    		 {
    		 case 1:
    		 {
    			 GPIOB_ODR =0;
 8000278:	4b27      	ldr	r3, [pc, #156]	; (8000318 <main+0x144>)
 800027a:	2200      	movs	r2, #0
 800027c:	615a      	str	r2, [r3, #20]
    			 break;
 800027e:	e048      	b.n	8000312 <main+0x13e>

    		 }
    		 case 2:
    		 {
    			 GPIOB_ODR =0;
 8000280:	4b25      	ldr	r3, [pc, #148]	; (8000318 <main+0x144>)
 8000282:	2200      	movs	r2, #0
 8000284:	615a      	str	r2, [r3, #20]
    			 GPIOB_ODR |=(1<<5);
 8000286:	4b24      	ldr	r3, [pc, #144]	; (8000318 <main+0x144>)
 8000288:	695b      	ldr	r3, [r3, #20]
 800028a:	4a23      	ldr	r2, [pc, #140]	; (8000318 <main+0x144>)
 800028c:	f043 0320 	orr.w	r3, r3, #32
 8000290:	6153      	str	r3, [r2, #20]
    			 break;
 8000292:	e03e      	b.n	8000312 <main+0x13e>
    		 }
    		 case 3:
    		 {
    			 GPIOB_ODR =0;
 8000294:	4b20      	ldr	r3, [pc, #128]	; (8000318 <main+0x144>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
    			 GPIOB_ODR |=(1<<6);
 800029a:	4b1f      	ldr	r3, [pc, #124]	; (8000318 <main+0x144>)
 800029c:	695b      	ldr	r3, [r3, #20]
 800029e:	4a1e      	ldr	r2, [pc, #120]	; (8000318 <main+0x144>)
 80002a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a4:	6153      	str	r3, [r2, #20]
    			 break;
 80002a6:	e034      	b.n	8000312 <main+0x13e>
    		 }
    		 case 4:
    		 {
    			 GPIOB_ODR =0;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <main+0x144>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	615a      	str	r2, [r3, #20]
    			 GPIOB_ODR |=(1<<7);
 80002ae:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <main+0x144>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a19      	ldr	r2, [pc, #100]	; (8000318 <main+0x144>)
 80002b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b8:	6153      	str	r3, [r2, #20]

    			 break;
 80002ba:	e02a      	b.n	8000312 <main+0x13e>
    		 }
    		 case 5:
    		 {
    			 GPIOB_ODR =0;
 80002bc:	4b16      	ldr	r3, [pc, #88]	; (8000318 <main+0x144>)
 80002be:	2200      	movs	r2, #0
 80002c0:	615a      	str	r2, [r3, #20]
    			 GPIOB_ODR |=((1<<5)|(1<<6));
 80002c2:	4b15      	ldr	r3, [pc, #84]	; (8000318 <main+0x144>)
 80002c4:	695b      	ldr	r3, [r3, #20]
 80002c6:	4a14      	ldr	r2, [pc, #80]	; (8000318 <main+0x144>)
 80002c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80002cc:	6153      	str	r3, [r2, #20]

    			 break;
 80002ce:	e020      	b.n	8000312 <main+0x13e>
    		 }
    		 case 6:
    		 {
    			 GPIOB_ODR=0;
 80002d0:	4b11      	ldr	r3, [pc, #68]	; (8000318 <main+0x144>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	615a      	str	r2, [r3, #20]
    			 GPIOB_ODR |=((1<<5)|(1<<7));
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <main+0x144>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <main+0x144>)
 80002dc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80002e0:	6153      	str	r3, [r2, #20]
    			 break;
 80002e2:	e016      	b.n	8000312 <main+0x13e>
    		 }
    		 case 7:
    		 {
    			 GPIOB_ODR =0;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <main+0x144>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	615a      	str	r2, [r3, #20]

    			 GPIOB_ODR |=((1<<6)|(1<<7));
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <main+0x144>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <main+0x144>)
 80002f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80002f4:	6153      	str	r3, [r2, #20]
    			 break;
 80002f6:	e00c      	b.n	8000312 <main+0x13e>
    		 }
    		 default:
    		 {
    			 GPIOB_ODR =0;
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <main+0x144>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	615a      	str	r2, [r3, #20]
    			 GPIOB_ODR |=((1<<5)|(1<<6)|(1<<7));
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <main+0x144>)
 8000300:	695b      	ldr	r3, [r3, #20]
 8000302:	4a05      	ldr	r2, [pc, #20]	; (8000318 <main+0x144>)
 8000304:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000308:	6153      	str	r3, [r2, #20]
    			 count =0;
 800030a:	2300      	movs	r3, #0
 800030c:	603b      	str	r3, [r7, #0]
 800030e:	e784      	b.n	800021a <main+0x46>

    		 }
    		 }
    	 }
 8000310:	bf00      	nop
     if((GPIOB_IDR & (1<<3))==0x08)
 8000312:	e782      	b.n	800021a <main+0x46>
 8000314:	40023800 	.word	0x40023800
 8000318:	40020400 	.word	0x40020400

0800031c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <SystemInit+0x20>)
 8000322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000326:	4a05      	ldr	r2, [pc, #20]	; (800033c <SystemInit+0x20>)
 8000328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800032c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000378 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000346:	490e      	ldr	r1, [pc, #56]	; (8000380 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000348:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800035c:	4c0b      	ldr	r4, [pc, #44]	; (800038c <LoopFillZerobss+0x26>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800036a:	f7ff ffd7 	bl	800031c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800036e:	f000 f811 	bl	8000394 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000372:	f7ff ff2f 	bl	80001d4 <main>
  bx  lr    
 8000376:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000378:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000384:	080003fc 	.word	0x080003fc
  ldr r2, =_sbss
 8000388:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800038c:	2000001c 	.word	0x2000001c

08000390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>
	...

08000394 <__libc_init_array>:
 8000394:	b570      	push	{r4, r5, r6, lr}
 8000396:	4d0d      	ldr	r5, [pc, #52]	; (80003cc <__libc_init_array+0x38>)
 8000398:	4c0d      	ldr	r4, [pc, #52]	; (80003d0 <__libc_init_array+0x3c>)
 800039a:	1b64      	subs	r4, r4, r5
 800039c:	10a4      	asrs	r4, r4, #2
 800039e:	2600      	movs	r6, #0
 80003a0:	42a6      	cmp	r6, r4
 80003a2:	d109      	bne.n	80003b8 <__libc_init_array+0x24>
 80003a4:	4d0b      	ldr	r5, [pc, #44]	; (80003d4 <__libc_init_array+0x40>)
 80003a6:	4c0c      	ldr	r4, [pc, #48]	; (80003d8 <__libc_init_array+0x44>)
 80003a8:	f000 f818 	bl	80003dc <_init>
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	10a4      	asrs	r4, r4, #2
 80003b0:	2600      	movs	r6, #0
 80003b2:	42a6      	cmp	r6, r4
 80003b4:	d105      	bne.n	80003c2 <__libc_init_array+0x2e>
 80003b6:	bd70      	pop	{r4, r5, r6, pc}
 80003b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003bc:	4798      	blx	r3
 80003be:	3601      	adds	r6, #1
 80003c0:	e7ee      	b.n	80003a0 <__libc_init_array+0xc>
 80003c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c6:	4798      	blx	r3
 80003c8:	3601      	adds	r6, #1
 80003ca:	e7f2      	b.n	80003b2 <__libc_init_array+0x1e>
 80003cc:	080003f4 	.word	0x080003f4
 80003d0:	080003f4 	.word	0x080003f4
 80003d4:	080003f4 	.word	0x080003f4
 80003d8:	080003f8 	.word	0x080003f8

080003dc <_init>:
 80003dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003de:	bf00      	nop
 80003e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e2:	bc08      	pop	{r3}
 80003e4:	469e      	mov	lr, r3
 80003e6:	4770      	bx	lr

080003e8 <_fini>:
 80003e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ea:	bf00      	nop
 80003ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ee:	bc08      	pop	{r3}
 80003f0:	469e      	mov	lr, r3
 80003f2:	4770      	bx	lr
